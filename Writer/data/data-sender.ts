IMPORT DATATOSEND FROM "../MODELS/SENDING/DATA-TO-SEND";
IMPORT ICHANELSENDERPROVIDER FROM "./CHANEL-SENDERS/CHANEL-SENDER-PROVIDER.INTERFACE";
IMPORT DATAPORTION FROM "../MODELS/SENDING/PORTIONS/DATA-PORTION";
IMPORT DATATYPE FROM "../MODELS/SENDING/PORTIONS/DATA-TYPE";
IMPORT HEADPAYLOAD FROM "../MODELS/SENDING/PORTIONS/PAYLOADS/HEAD-PAYLOAD";
IMPORT ICHANELSENDER FROM "./CHANEL-SENDERS/CHANEL-SENDER.INTERFACE";
IMPORT BODYPAYLOAD FROM "../MODELS/SENDING/PORTIONS/PAYLOADS/BODY-PAYLOAD";

CONST FS = REQUIRE('FS');
CONST UUIDV1 = REQUIRE('UUID/V1');

CLASS DATASENDER {

    CONSTRUCTOR(PRIVATE CHANELSENDERPROVIDER: ICHANELSENDERPROVIDER) {
    }

    PUBLIC ASYNC SENDASYNC(DATATOSEND: DATATOSEND) {

        CONST SENDER = THIS.CHANELSENDERPROVIDER.GET(DATATOSEND.CHANEL);

        CONST HEADPORTION = THIS.GETHEADPORTION(DATATOSEND);

        AWAIT SENDER.SEND(HEADPORTION);

        AWAIT THIS.READANDSENDFILEASYNC(HEADPORTION.SESSIONID, DATATOSEND, SENDER);
    }

    PRIVATE ASYNC READANDSENDFILEASYNC(SESSIONID: STRING, DATATOSEND: DATATOSEND, SENDER: ICHANELSENDER) {

        CONST READSTREAM = FS.CREATEREADSTREAM(DATATOSEND.FILENAME);
        LET SEQUENCE = 0;

        READSTREAM
            .ON('DATA', (CHUNK: BUFFER) => {

                CONST BODYPORTOIN = THIS.GETBODYPORTION(SESSIONID, CHUNK, SEQUENCE);

                SENDER.SEND(BODYPORTOIN);

                SEQUENCE++;
            })
            .ON('END', () => {
                CONST ENDPORTION = NEW DATAPORTION(DATATYPE.END, NULL, SESSIONID);

                SENDER.SEND(ENDPORTION);
            });
    }

    PRIVATE GETHEADPORTION(DATATOSEND: DATATOSEND): DATAPORTION {

        CONST SESSIONID = UUIDV1();
        CONST PAYLOAD = NEW HEADPAYLOAD(DATATOSEND.FILENAME);
        CONST PORTION = NEW DATAPORTION(DATATYPE.HEAD, PAYLOAD, SESSIONID);

        RETURN PORTION;
    }

    PRIVATE GETBODYPORTION(SESSIONID: STRING, CHUNK: BUFFER, SEQUENCE: NUMBER): DATAPORTION {

        CONST PAYLOAD = NEW BODYPAYLOAD(CHUNK.TOSTRING());
        CONST PORTION = NEW DATAPORTION(DATATYPE.BODY, PAYLOAD, SESSIONID);

        RETURN PORTION;
    }
}

EXPORT DEFAULT DATASENDERIMPORT DATATOSEND FROM "../MODELS/SENDING/DATA-TO-SEND";
IMPORT ICHANELSENDERPROVIDER FROM "./CHANEL-SENDERS/CHANEL-SENDER-PROVIDER.INTERFACE";
IMPORT DATAPORTION FROM "../MODELS/SENDING/PORTIONS/DATA-PORTION";
IMPORT DATATYPE FROM "../MODELS/SENDING/PORTIONS/DATA-TYPE";
IMPORT HEADPAYLOAD FROM "../MODELS/SENDING/PORTIONS/PAYLOADS/HEAD-PAYLOAD";
IMPORT ICHANELSENDER FROM "./CHANEL-SENDERS/CHANEL-SENDER.INTERFACE";
IMPORT BODYPAYLOAD FROM "../MODELS/SENDING/PORTIONS/PAYLOADS/BODY-PAYLOAD";

CONST FS = REQUIRE('FS');
CONST UUIDV1 = REQUIRE('UUID/V1');

CLASS DATASENDER {

    CONSTRUCTOR(PRIVATE CHANELSENDERPROVIDER: ICHANELSENDERPROVIDER) {
    }

    PUBLIC ASYNC SENDASYNC(DATATOSEND: DATATOSEND) {

        CONST SENDER = THIS.CHANELSENDERPROVIDER.GET(DATATOSEND.CHANEL);

        CONST HEADPORTION = THIS.GETHEADPORTION(DATATOSEND);

        AWAIT SENDER.SEND(HEADPORTION);

        AWAIT THIS.READANDSENDFILEASYNC(HEADPORTION.SESSIONID, DATATOSEND, SENDER);
    }

    PRIVATE ASYNC READANDSENDFILEASYNC(SESSIONID: STRING, DATATOSEND: DATATOSEND, SENDER: ICHANELSENDER) {

        CONST READSTREAM = FS.CREATEREADSTREAM(DATATOSEND.FILENAME);
        LET SEQUENCE = 0;

        READSTREAM
            .ON('DATA', (CHUNK: BUFFER) => {

                CONST BODYPORTOIN = THIS.GETBODYPORTION(SESSIONID, CHUNK, SEQUENCE);

                SENDER.SEND(BODYPORTOIN);

                SEQUENCE++;
            })
            .ON('END', () => {
                CONST ENDPORTION = NEW DATAPORTION(DATATYPE.END, NULL, SESSIONID);

                SENDER.SEND(ENDPORTION);
            });
    }

    PRIVATE GETHEADPORTION(DATATOSEND: DATATOSEND): DATAPORTION {

        CONST SESSIONID = UUIDV1();
        CONST PAYLOAD = NEW HEADPAYLOAD(DATATOSEND.FILENAME);
        CONST PORTION = NEW DATAPORTION(DATATYPE.HEAD, PAYLOAD, SESSIONID);

        RETURN PORTION;
    }

    PRIVATE GETBODYPORTION(SESSIONID: STRING, CHUNK: BUFFER, SEQUENCE: NUMBER): DATAPORTION {

        CONST PAYLOAD = NEW BODYPAYLOAD(CHUNK.TOSTRING());
        CONST PORTION = NEW DATAPORTION(DATATYPE.BODY, PAYLOAD, SESSIONID);

        RETURN PORTION;
    }
}

EXPORT DEFAULT DATASENDER